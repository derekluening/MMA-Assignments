###########Reading in Libraries###########
library(ggplot2)
library(dplyr)
library(tidyverse)
library(car)
library(caret)
library(mice)
library(corrplot)
library(Metrics)
library(glmnet)

############Reading in our datasets########### 
train_path <- "train.csv"
test_path <- "test.csv"

train <- read.csv(file.choose(), stringsAsFactors = FALSE, header = TRUE, sep = ',')
test<- read.csv(file.choose(), stringsAsFactors = FALSE, header = TRUE, sep = ',')

###########Preliminary investigation of our test dataset###########
str(train) #Lots of variables are set as ints and chr. Will likely need to change most if not all characters to factors at some point.
head(train)#Little difficult to digest what is going on here. 
summary(train) #Seeing some NA values throughout the dataset. We will need to deal with these however, they might be more ordinal/categorical than anything.
md.pattern(train) #Confirmed thoughts above - will need to deal with some missing information 

###########Data Cleaning for our Training Set###########

#Identifying which columns have NA values and how many there are in our training set 
na_columns <- which(colSums(is.na(train)) > 0)
sort(colSums(sapply(train[na_columns], is.na)), decreasing = TRUE) #main columns that have Na's are with the garage and basement, will need to further investigate what is happening here


###Cleaning Pool NA's###

#It appears like there are two pool variables that we need to consider, pool area and quality
#Based on the data dictionary, it looks like the NA's are homes that don't have a pool. Lets recode those to none
train$PoolQC[is.na(train$PoolQC)] <- 'None' #all homes without a pool that were previously NA are recoded to None

###CLEANING FENCE###

#From the data dictionary, the NA's indicate that there is no fence. Changing NA's to No Fence
train$Fence[is.na(train$Fence)] <- 'None'#All fences converted

###Cleaning Fireplace Quality###

#Similar scenario to our fences - Na's indicate that no fireplace exists. Changing Na's to None
train$FireplaceQu[is.na(train$FireplaceQu)] <- 'None'#All values converted

###Cleaning MiscFeature###

#Based on the data dictionary, it appears that Na's represent No misc feature
#Similar scenario to our fireplace and fence, convert Na to None
train$MiscFeature[is.na(train$MiscFeature)] <- 'None' #All values converted

###Cleaning Alley###

#Based on data dictionary, it appears that Na's represent no alley access
#Similar to our fireplace and fence, we will convert our NA to None
train$Alley[is.na(train$Alley)] <- 'None' #All values converted

###Cleaning Electrical###

#We have one missing value in electrical as a result we will code it to the most common value
table(train$Electrical) #SBrKr seems to be the most common 
train$Electrical[is.na(train$Electrical)] <-  'SBrkr'

###Cleaning the MasVNRType and MASVNR Area###

table(train$MasVnrType)

#Based on the data dictionary, if there is a missing value it means that there is no masonry
#on the house. Should recode this to None and the area to 0
train$MasVnrType[is.na(train$MasVnrType)] <-  'None'#Values changed to none
train$MasVnrArea[is.na(train$MasVnrArea)] <-  0 #values changed to 0

###Cleaning our Basement Variables###
table(train$BsmtExposure)
table(train$BsmtFinType2)
table(train$BsmtCond)
table(train$BsmtQual)

#Changing the rest of the categorical variables from NA to None
train$BsmtExposure[is.na(train$BsmtExposure)] <-  'None'
train$BsmtFinType2[is.na(train$BsmtFinType2)] <-  'None'
train$BsmtQual[is.na(train$BsmtQual)] <-  'None'
train$BsmtCond[is.na(train$BsmtCond)] <-  'None'
train$BsmtFinType1[is.na(train$BsmtFinType1)] <- 'None'

###Cleaning our Garage Variables###
table(train$GarageCond)
table(train$GarageQual)
table(train$GarageFinish)

train$GarageType[is.na(train$GarageType)] <-  'None'
train$GarageFinish[is.na(train$GarageFinish)] <-  'None'
train$GarageQual[is.na(train$GarageQual)] <-  'None'
train$GarageCond[is.na(train$GarageCond)] <-  'None'

#Year Garage was built. Assigned this to the year the house was build
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- train$YearBuilt[is.na(train$GarageYrBlt)]

###Cleaning Lot Frontage###
train$LotFrontage[is.na(train$LotFrontage)] <- median(train$LotFrontage,na.rm = T)

###Cleaning the Functional Column###
#There is only one value missing in the functional column, will impute with the mode
table(train$Functional)
train$Functional[is.na(train$Functional)] <-  "Typ"

#Cleaning Exterior1st and Exterior 2nd columns###
#Only one missing value for exterior 1st, will impute with the mode
table(train$Exterior1st)
train$Exterior1st[is.na(train$Exterior1st)] <-  "VinylSd"

#Only one missing value for exterior2nd. Will impute the mode
table(train$Exterior2nd)
train$Exterior2nd[is.na(train$Exterior2nd)] <-  "VinylSd"

###Cleaning the Kitchen Quality Column###
#Only one missing value for kitchen quality. Will impute using the mode
table(train$KitchenQual)
train$KitchenQual[is.na(train$KitchenQual)] <-  "TA"

###Cleaning the sale type column###
#Only one missing value, will impute with the mode
table(train$SaleType)
train$SaleType[is.na(train$SaleType)] <-  "WD"



###########Data Cleaning for our Testing Set###########

#Identifying which columns have NA values and how many there are in our training set 
na_columns <- which(colSums(is.na(test)) > 0)
sort(colSums(sapply(test[na_columns], is.na)), decreasing = TRUE) 

###Cleaning Pool NA's###

#It appears like there are two pool variables that we need to consider, pool area and quality
#Based on the data dictionary, it looks like the NA's are homes that don't have a pool. Lets recode those to none
test$PoolQC[is.na(test$PoolQC)] <- 'None' #all homes without a pool that were previously NA are recoded to None

###Cleaning MiscFeature###

#Based on the data dictionary, it appears that Na's represent No misc feature
#similar scenario to our fireplace and fence, convert Na to None
test$MiscFeature[is.na(test$MiscFeature)] <- 'None' #All values converted

###CLEANING FENCE###

#From the data dictionary, the NA's indicate that there is no fence. Changing NA's to No Fence
test$Fence[is.na(test$Fence)] <- 'None'#All fences converted

###Cleaning Fireplace Quality###

#Similar scenario to our fences - Na's indicate that no fireplace exists. Changing Na's to None
test$FireplaceQu[is.na(test$FireplaceQu)] <- 'None'#All values converted

###Cleaning Alley###

#Based on data dictionary, it appears that Na's represent no alley access
#similar to our fireplace and fence, we will convert our NA to None
test$Alley[is.na(test$Alley)] <- 'None' #All values converted

###Cleaning Masonry type and vnr###
#Based on the data dictionary, if there is a missing value it means that there is no masonary
#on the house. Should recode this to None and the area to 0
test$MasVnrType[is.na(test$MasVnrType)] <-  'None'#Values changed to none
test$MasVnrArea[is.na(test$MasVnrArea)] <-  0 #values changed to 0

###Cleaning Basement Variables###

#Changing the rest of the categorical variables from NA to None and converting area variables to 0
test$BsmtExposure[is.na(test$BsmtExposure)] <-  'None'
test$BsmtFinType2[is.na(test$BsmtFinType2)] <-  'None'
test$BsmtQual[is.na(test$BsmtQual)] <-  'None'
test$BsmtCond[is.na(test$BsmtCond)] <-  'None'
test$BsmtFinType1[is.na(test$BsmtFinType1)] <-  'None'
test$BsmtFinSF1[is.na(test$BsmtFinSF1)] <-  0
test$BsmtFinSF2[is.na(test$BsmtFinSF2)] <-  0
test$TotalBsmtSF[is.na(test$TotalBsmtSF)] <-  0 
test$BsmtUnfSF[is.na(test$BsmtUnfSF)] <-  0 
test$BsmtFullBath[is.na(test$BsmtFullBath)] <-  0
test$BsmtHalfBath[is.na(test$BsmtHalfBath)] <-  0


###Cleaning our Garage Variables###

#Converted NA's to None and area variables to 0 
test$GarageType[is.na(test$GarageType)] <-  'None'
test$GarageFinish[is.na(test$GarageFinish)] <-  'None'
test$GarageQual[is.na(test$GarageQual)] <-  'None'
test$GarageCond[is.na(test$GarageCond)] <-  'None'
test$GarageArea[is.na(test$GarageArea)] <-  0
test$GarageCars[is.na(test$GarageCars)] <-  0

#Cleaning the year that the garages were built column 
#Assigned the year the garage was built to the year the house was built
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- test$YearBuilt[is.na(test$GarageYrBlt)]

###Cleaning Lot Frontage###
test$LotFrontage[is.na(test$LotFrontage)] <- median(test$LotFrontage,na.rm = T)

###Cleaning the Functional Column###
#There is only one value missing in the functional column, will impute with the mode
test$Functional[is.na(test$Functional)] <-  "Typ"

#Cleaning Exterior1st and Exterior 2nd columns###
#Only one missing value for exterior 1st, will impute with the mode
table(test$Exterior1st)
test$Exterior1st[is.na(test$Exterior1st)] <-  "VinylSd"

#Only one missing value for exterior2nd. Will impute the mode
table(test$Exterior2nd)
test$Exterior2nd[is.na(test$Exterior2nd)] <-  "VinylSd"

###Cleaning the Kitchen Quality Column###
#Only one missing value for kitchen quality. Will impute using the mode
table(test$KitchenQual)
test$KitchenQual[is.na(test$KitchenQual)] <-  "TA"

###Cleaning the sale type column###
#Only one missing value, will impute with the mode
table(test$SaleType)
test$SaleType[is.na(test$SaleType)] <-  "WD"

#Cleaning MSZoning
#Only one missing value, will impute with the mode
table(test$MSZoning)
test$MSZoning[is.na(test$MSZoning)] <-  "RL"

#Cleaning Utilities
#Only one missing value, will impute with the mode
table(test$Utilities)
test$Utilities[is.na(test$Utilities)] <-  'AllPub'

#Final missing values check
#No missing values - Ok to proceed to modeling. 
md.pattern(train)
md.pattern(test)

###########Converting characters to factors###########
#Converting Train dataset to Factor
str(train)
train[sapply(train, is.character)] <- lapply(train[sapply(train, is.character)], as.factor)
str(train)

#Converting additional Train columns to factors that were previously int or num
train$MSSubClass <- as.factor(train$MSSubClass)
train$YearBuilt <- as.factor(train$YearBuilt)
train$MoSold <- as.factor(train$MoSold)
train$YrSold <- as.factor(train$YrSold)
train$GarageYrBlt <- as.factor(train$GarageYrBlt)

#Converting Test dataset to Factor
str(test)
test[sapply(test, is.character)] <- lapply(test[sapply(test, is.character)], as.factor)
str(test)

#Converting additional columns to factors that were previously int or num
test$MSSubClass <- as.factor(test$MSSubClass)
test$YearBuilt <- as.factor(test$YearBuilt)
test$MoSold <- as.factor(test$MoSold)
test$YrSold <- as.factor(test$YrSold)
test$GarageYrBlt <- as.factor(test$GarageYrBlt)

###########Combining Train and Test sets into one Master File###########
test$SalePrice<-rep(NA,1459)
master<- rbind(train,test)

###########Basic Feature Engineering###########
#Creating a column that includes total bathrooms for the entire house and penalized the half baths by 0.5
master$TotalBathrooms <- master$BsmtFullBath + (master$BsmtHalfBath*0.5) + master$FullBath + (master$HalfBath*0.5)

#Creating a column that includes total square footage for the entire house
master$TotalSq <- master$GrLivArea + master$TotalBsmtSF

#Creating a column that indicates if a house was remodeled or not
master$Remodel <- ifelse(master$YearBuilt==master$YearRemodAdd,0,1) #0 = No remodel, 1 = Remodel

###########Building Model train, test, and prediction data sets###########
master_train <- subset(master, Id<=1000)
master_test <- subset(master, Id>=1001 & Id <=1460)
master_predict <- subset(master, Id>=1461)


###########Final Model- MAPE of ~8.43.###########
#This model was submitted to the leaderboard and placed 2297/8952 = 25.6%
master_train <- subset(master, Id<=1000)
master_test <- subset(master, Id>=1001 & Id <=1460)
y<-log(master_train$SalePrice)
X<-model.matrix(Id~ MSSubClass+Neighborhood+LotConfig+MSZoning+MSZoning*LotConfig*LotArea*Neighborhood*TotalSq+LotArea+log(LotArea)+
                  Street+ BldgType*log(GrLivArea)*TotalBsmtSF + 
                  OverallQual+OverallCond +
                  +MSZoning*CentralAir*Neighborhood*BldgType*OverallQual*OverallCond*log(OverallQual)*log(TotalSq)+YearBuilt +TotalBsmtSF+
                  TotalBsmtSF*BsmtCond+BsmtCond+log(GrLivArea)+ 
                  GrLivArea+TotalBathrooms*GrLivArea*TotalBsmtSF+HouseStyle+ HouseStyle*Neighborhood*LotArea*log(LotArea)*log(GrLivArea)+
                  RoofStyle+MasVnrArea+GarageType+GarageArea+GarageQual+PoolQC+MoSold+CentralAir+
                  GarageType*GarageArea+Foundation+ExterQual+BsmtFinType1+BsmtFinSF1+BsmtFinType1*BsmtFinSF1*BsmtFinSF2+BsmtFinSF2+
                  ExterCond+Remodel*log(TotalSq)*CentralAir*HeatingQC+HeatingQC+Remodel+Condition1+SaleCondition*log(TotalSq)*YrSold+BedroomAbvGr, master)[,-1]
X<-cbind(master$Id,X)
X.training<-subset(X,X[,1]<=1000)
X.testing<-subset(X, (X[,1]>=1001 & X[,1]<=1460))
X.predicting<-subset(X, (X[,1]>=1461))

lasso.fit <- glmnet(x = X.training, y=y, alpha = 1)
plot(lasso.fit, xvar = 'lambda')

crossval <- cv.glmnet (x=X.training, y=y, alpha =1)
plot(crossval)

penalty.lasso <- crossval$lambda.min
log(penalty.lasso)

lasso.opt.fit <- glmnet(x = X.training, y=y, alpha=1, lambda = penalty.lasso)
coef(lasso.opt.fit)

lasso.testing <- exp(predict(lasso.opt.fit, s = penalty.lasso, newx = X.testing))
mean(abs(lasso.testing-master_test$SalePrice)/master_test$SalePrice)*100

lasso.predicting <- exp(predict(lasso.opt.fit, s = penalty.lasso, newx = X.predicting))
#write.csv(lasso.predicting, file = "MMA 867 Model 21.csv")
